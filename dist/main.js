/******/ (() => { // webpackBootstrap
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
const search = document.querySelector('input');
const weather = document.querySelector('.forecast-results');
const errorMessage = document.querySelector('.error');
const icon = document.querySelector('.weather-icon');
search.addEventListener("keypress", e => {
  if (e.key === "Enter") getWeather(search, displayWeather);
});
async function getWeather(search, displayWeather) {
  let data = "";
  try {
    data = await fetch("http://api.weatherapi.com/v1/current.json?key=266ffb2a72a14ebc8d9161324240603&q=" + search.value + "&aqi=no", {
      mode: "cors"
    });
    const forecast = await data.json();
    console.log(forecast);
    displayWeather(forecast);
  } catch (error) {
    console.log(error);
    if (search.value === '') return;
    errorMessage.textContent = "Could not get weather data";
    weather.textContent = '';
    icon.style.display = 'none';
  }
}
function displayWeather(forecast) {
  errorMessage.textContent = "";
  weather.textContent = `Forecast for ${forecast.location.name}, ${forecast.location.country}: \n Temperature: ${forecast.current.temp_f}°F/${forecast.current.temp_c}°C, ${forecast.current.condition.text}`;
  icon.src = forecast.current.condition.icon;
  icon.style.display = 'initial';
}
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsTUFBTUEsTUFBTSxHQUFHQyxRQUFRLENBQUNDLGFBQWEsQ0FBQyxPQUFPLENBQUM7QUFDOUMsTUFBTUMsT0FBTyxHQUFHRixRQUFRLENBQUNDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztBQUMzRCxNQUFNRSxZQUFZLEdBQUdILFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLFFBQVEsQ0FBQztBQUNyRCxNQUFNRyxJQUFJLEdBQUdKLFFBQVEsQ0FBQ0MsYUFBYSxDQUFDLGVBQWUsQ0FBQztBQUVwREYsTUFBTSxDQUFDTSxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUdDLENBQUMsSUFBSztFQUN6QyxJQUFJQSxDQUFDLENBQUNDLEdBQUcsS0FBSyxPQUFPLEVBQUVDLFVBQVUsQ0FBQ1QsTUFBTSxFQUFFVSxjQUFjLENBQUM7QUFDM0QsQ0FBQyxDQUFDO0FBRUQsZUFBZUQsVUFBVUEsQ0FBQ1QsTUFBTSxFQUFFVSxjQUFjLEVBQUU7RUFDaEQsSUFBSUMsSUFBSSxHQUFHLEVBQUU7RUFDYixJQUFJO0lBQ0ZBLElBQUksR0FBRyxNQUFNQyxLQUFLLENBQ2hCLGtGQUFrRixHQUFHWixNQUFNLENBQUNhLEtBQUssR0FBRyxTQUFTLEVBQzdHO01BQUVDLElBQUksRUFBRTtJQUFPLENBQ2pCLENBQUM7SUFDRCxNQUFNQyxRQUFRLEdBQUcsTUFBTUosSUFBSSxDQUFDSyxJQUFJLENBQUMsQ0FBQztJQUNsQ0MsT0FBTyxDQUFDQyxHQUFHLENBQUNILFFBQVEsQ0FBQztJQUNyQkwsY0FBYyxDQUFDSyxRQUFRLENBQUM7RUFDMUIsQ0FBQyxDQUFDLE9BQU9JLEtBQUssRUFBRTtJQUNkRixPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsS0FBSyxDQUFDO0lBQ2xCLElBQUluQixNQUFNLENBQUNhLEtBQUssS0FBSyxFQUFFLEVBQUU7SUFDekJULFlBQVksQ0FBQ2dCLFdBQVcsR0FBRyw0QkFBNEI7SUFDdkRqQixPQUFPLENBQUNpQixXQUFXLEdBQUcsRUFBRTtJQUN4QmYsSUFBSSxDQUFDZ0IsS0FBSyxDQUFDQyxPQUFPLEdBQUcsTUFBTTtFQUM3QjtBQUNGO0FBRUQsU0FBU1osY0FBY0EsQ0FBQ0ssUUFBUSxFQUFFO0VBQzdCWCxZQUFZLENBQUNnQixXQUFXLEdBQUcsRUFBRTtFQUM3QmpCLE9BQU8sQ0FBQ2lCLFdBQVcsR0FBSSxnQkFBZUwsUUFBUSxDQUFDUSxRQUFRLENBQUNDLElBQUssS0FBSVQsUUFBUSxDQUFDUSxRQUFRLENBQUNFLE9BQVEscUJBQW9CVixRQUFRLENBQUNXLE9BQU8sQ0FBQ0MsTUFBTyxNQUFLWixRQUFRLENBQUNXLE9BQU8sQ0FBQ0UsTUFBTyxPQUFNYixRQUFRLENBQUNXLE9BQU8sQ0FBQ0csU0FBUyxDQUFDQyxJQUFLLEVBQUM7RUFDM016QixJQUFJLENBQUMwQixHQUFHLEdBQUdoQixRQUFRLENBQUNXLE9BQU8sQ0FBQ0csU0FBUyxDQUFDeEIsSUFBSTtFQUMxQ0EsSUFBSSxDQUFDZ0IsS0FBSyxDQUFDQyxPQUFPLEdBQUcsU0FBUztBQUMvQixDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2VhdGhlci8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBzZWFyY2ggPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpXHJcbmNvbnN0IHdlYXRoZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9yZWNhc3QtcmVzdWx0cycpXHJcbmNvbnN0IGVycm9yTWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lcnJvcicpO1xyXG5jb25zdCBpY29uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLndlYXRoZXItaWNvbicpXHJcblxyXG5zZWFyY2guYWRkRXZlbnRMaXN0ZW5lcihcImtleXByZXNzXCIsIChlKSA9PiB7XHJcbiAgaWYgKGUua2V5ID09PSBcIkVudGVyXCIpIGdldFdlYXRoZXIoc2VhcmNoLCBkaXNwbGF5V2VhdGhlcik7XHJcbn0pO1xyXG5cclxuIGFzeW5jIGZ1bmN0aW9uIGdldFdlYXRoZXIoc2VhcmNoLCBkaXNwbGF5V2VhdGhlcikge1xyXG4gICBsZXQgZGF0YSA9IFwiXCJcclxuICAgdHJ5IHtcclxuICAgICBkYXRhID0gYXdhaXQgZmV0Y2goXHJcbiAgICAgICBcImh0dHA6Ly9hcGkud2VhdGhlcmFwaS5jb20vdjEvY3VycmVudC5qc29uP2tleT0yNjZmZmIyYTcyYTE0ZWJjOGQ5MTYxMzI0MjQwNjAzJnE9XCIgKyBzZWFyY2gudmFsdWUgKyBcIiZhcWk9bm9cIixcclxuICAgICAgIHsgbW9kZTogXCJjb3JzXCIgfVxyXG4gICAgIClcclxuICAgICBjb25zdCBmb3JlY2FzdCA9IGF3YWl0IGRhdGEuanNvbigpXHJcbiAgICAgY29uc29sZS5sb2coZm9yZWNhc3QpXHJcbiAgICAgZGlzcGxheVdlYXRoZXIoZm9yZWNhc3QpXHJcbiAgIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgaWYgKHNlYXJjaC52YWx1ZSA9PT0gJycpIHJldHVyblxyXG4gICAgIGVycm9yTWVzc2FnZS50ZXh0Q29udGVudCA9IFwiQ291bGQgbm90IGdldCB3ZWF0aGVyIGRhdGFcIjtcclxuICAgICB3ZWF0aGVyLnRleHRDb250ZW50ID0gJydcclxuICAgICBpY29uLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSdcclxuICAgfVxyXG4gfVxyXG5cclxuZnVuY3Rpb24gZGlzcGxheVdlYXRoZXIoZm9yZWNhc3QpIHtcclxuICAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSBcIlwiO1xyXG4gICAgIHdlYXRoZXIudGV4dENvbnRlbnQgPSBgRm9yZWNhc3QgZm9yICR7Zm9yZWNhc3QubG9jYXRpb24ubmFtZX0sICR7Zm9yZWNhc3QubG9jYXRpb24uY291bnRyeX06IFxcbiBUZW1wZXJhdHVyZTogJHtmb3JlY2FzdC5jdXJyZW50LnRlbXBfZn3CsEYvJHtmb3JlY2FzdC5jdXJyZW50LnRlbXBfY33CsEMsICR7Zm9yZWNhc3QuY3VycmVudC5jb25kaXRpb24udGV4dH1gO1xyXG4gICAgIGljb24uc3JjID0gZm9yZWNhc3QuY3VycmVudC5jb25kaXRpb24uaWNvblxyXG4gICAgIGljb24uc3R5bGUuZGlzcGxheSA9ICdpbml0aWFsJ1xyXG4gICAgfSJdLCJuYW1lcyI6WyJzZWFyY2giLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3ZWF0aGVyIiwiZXJyb3JNZXNzYWdlIiwiaWNvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5IiwiZ2V0V2VhdGhlciIsImRpc3BsYXlXZWF0aGVyIiwiZGF0YSIsImZldGNoIiwidmFsdWUiLCJtb2RlIiwiZm9yZWNhc3QiLCJqc29uIiwiY29uc29sZSIsImxvZyIsImVycm9yIiwidGV4dENvbnRlbnQiLCJzdHlsZSIsImRpc3BsYXkiLCJsb2NhdGlvbiIsIm5hbWUiLCJjb3VudHJ5IiwiY3VycmVudCIsInRlbXBfZiIsInRlbXBfYyIsImNvbmRpdGlvbiIsInRleHQiLCJzcmMiXSwic291cmNlUm9vdCI6IiJ9